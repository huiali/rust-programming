fn main() {
    // 在 Rust 中，每一个值都属于某一个 数据类型（data type），这告诉 Rust 它被指定为何种数据，以便明确数据处理方式。我们将看到两类数据类型子集：标量（scalar）和复合（compound）。
    // Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。根据值及其使用方式，编译器通常可以推断出我们想要用的类型。当多种类型均有可能时，
    let guess: u32 = "55".parse().expect("Not a number!");

    // 标量类型 -----
    
    / 整型

    // 长度         有符号	 无符号
    // 8-bit	    i8  	  u8
    // 16-bit	    i16 	  u16
    // 32-bit	    i32 	  u32
    // 64-bit	    i64 	  u64
    // 128-bit	    i128	  u128
    // arch	        isize	  usize

    // 每一个有符号的变体可以储存包含从 -(2n - 1) 到 2n - 1 - 1 在内的数字，这里 n 是变体使用的位数。
    // 所以 i8 可以储存从 -(27) 到 27 - 1 在内的数字，也就是从 -128 到 127。
    // 无符号的变体可以储存从 0 到 2n - 1 的数字，所以 u8 可以储存从 0 到 28 - 1 的数字，也就是从 0 到 255。

    // isize 和 usize 类型依赖运行程序的计算机架构：64 位架构上它们是 64 位的， 32 位架构上它们是 32 位的。

    //     数字字面值	               例子
    //  Decimal (十进制)	         98_222
    //  Hex (十六进制)	             0xff
    //  Octal (八进制)	             0o77
    //  Binary (二进制)	             0b1111_0000
    //  Byte (单字节字符)(仅限于u8)	  b'A'


    // 浮点型
}
