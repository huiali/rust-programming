// Rust 将错误组合成两个主要类别：可恢复错误（recoverable）和 不可恢复错误（unrecoverable）。
// 可恢复错误通常代表向用户报告错误和重试操作是合理的情况，比如未找到文件。
// 不可恢复错误通常是 bug 的同义词，比如尝试访问超过数组结尾的位置。

// Rust 的错误处理功能被设计为帮助你编写更加健壮的代码。panic! 宏代表一个程序无法处理的状态，
// 并停止执行而不是使用无效或不正确的值继续处理。
// Rust 类型系统的 Result 枚举代表操作可能会在一种可以恢复的情况下失败。
// 可以使用 Result 来告诉代码调用者他需要处理潜在的成功或失败。
// 在适当的场景使用 panic! 和 Result 将会使你的代码在面对不可避免的错误时显得更加可靠。

use std::fs::File;

fn main() {
    let f = File::open("hello.txt");
}


// enum Result<T, E> {
//     Ok(T),
//     Err(E),
// }